name: Load Test Auto Scaling

on:
  workflow_dispatch:
    inputs:
      test_duration:
        description: 'Test duration in minutes'
        required: true
        default: '10'
        type: choice
        options:
        - '5'
        - '8'
        - '12'
        - '15'

jobs:
  load-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Get Load Balancer URL and verify connectivity
        id: get-clb
        run: |
          cd terraform
          CLB_URL=$(terraform output -raw clb_dns_name 2>/dev/null || echo "hellomvc-clb-1606703946.ap-south-1.elb.amazonaws.com")
          echo "clb_url=$CLB_URL" >> $GITHUB_OUTPUT
          
          echo "Load Balancer URL: $CLB_URL"
          echo "Testing DNS resolution..."
          
          # Test if we can resolve the DNS
          if nslookup $CLB_URL; then
            echo "✅ DNS resolution successful"
          else
            echo "❌ DNS resolution failed, this might cause issues"
          fi
          
          # Test basic connectivity
          echo "Testing connectivity (timeout 10s)..."
          if curl -s --max-time 10 http://$CLB_URL/hello > /dev/null; then
            echo "✅ Connectivity test passed"
          else
            echo "⚠️ Connectivity test failed, but continuing anyway"
          fi

      - name: Check current Auto Scaling state
        run: |
          echo "=== Current Auto Scaling State ==="
          aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names hellomvc-asg \
            --region ap-south-1 \
            --query 'AutoScalingGroups[0].{Desired:DesiredCapacity, Min:MinSize, Max:MaxSize, Instances:Instances[*].InstanceId}' \
            --output table

      - name: Run Load Test with error handling
        run: |
          echo "=== Starting Load Test ==="
          echo "Target: ${{ steps.get-clb.outputs.clb_url }}"
          echo "Duration: ${{ github.event.inputs.test_duration }} minutes"
          
          # Create a more robust Python script
          cat > /tmp/load_test.py << 'EOF'
          import requests
          import time
          import random
          import sys
          from datetime import datetime
          
          class RobustTrafficGenerator:
              def __init__(self, base_url):
                  self.base_url = base_url
                  self.request_count = 0
                  self.failed_count = 0
                  
              def make_request(self, endpoint="hello"):
                  try:
                      # Increased timeout and retry logic
                      response = requests.get(f"{self.base_url}/{endpoint}", timeout=15)
                      self.request_count += 1
                      if self.request_count % 20 == 0:
                          print(f"[{datetime.now()}] Requests: {self.request_count}, Failed: {self.failed_count}")
                      return True
                  except Exception as e:
                      self.failed_count += 1
                      if self.failed_count % 10 == 0:  # Log every 10 failures
                          print(f"[{datetime.now()}] Request failed ({self.failed_count} total): {type(e).__name__}")
                      return False
              
              def generate_traffic(self, requests_per_second, duration_seconds):
                  print(f"Generating {requests_per_second} req/sec for {duration_seconds} seconds")
                  end_time = time.time() + duration_seconds
                  success_count = 0
                  
                  while time.time() < end_time:
                      success_in_batch = 0
                      for _ in range(requests_per_second):
                          if self.make_request():
                              success_in_batch += 1
                      
                      if success_in_batch == 0:
                          print(f"⚠️ Batch failed completely, continuing...")
                      
                      time.sleep(1)
                  
                  return success_count
          
          if __name__ == "__main__":
              if len(sys.argv) < 2:
                  print("Usage: python load_test.py <CLB_DNS_NAME> [duration_minutes]")
                  sys.exit(1)
              
              clb_url = f"http://{sys.argv[1]}"
              duration_minutes = int(sys.argv[2]) if len(sys.argv) > 2 else 10
              
              print(f"🚀 Starting robust load test for {duration_minutes} minutes")
              print(f"🎯 Target: {clb_url}")
              
              generator = RobustTrafficGenerator(clb_url)
              total_seconds = duration_minutes * 60
              phase_duration = total_seconds // 3
              
              print(f"📊 Phase 1: Normal traffic (2 min)")
              generator.generate_traffic(2, 120)
              
              print(f"📊 Phase 2: High traffic (should trigger scaling) (4 min)")
              generator.generate_traffic(15, 240)
              
              print(f"📊 Phase 3: Back to normal (4 min)")
              generator.generate_traffic(2, 240)
              
              print(f"✅ Load test completed!")
              print(f"📈 Total requests attempted: {generator.request_count + generator.failed_count}")
              print(f"✅ Successful: {generator.request_count}")
              print(f"❌ Failed: {generator.failed_count}")
              print(f"📊 Success rate: {generator.request_count/(generator.request_count + generator.failed_count)*100:.1f}%")
          EOF
          
          python /tmp/load_test.py "${{ steps.get-clb.outputs.clb_url }}" "${{ github.event.inputs.test_duration }}"

      - name: Wait for scaling activities
        run: |
          echo "Waiting 2 minutes for scaling to complete..."
          sleep 120

      - name: Check scaling results
        run: |
          echo "=== Scaling Activities ==="
          aws autoscaling describe-scaling-activities \
            --auto-scaling-group-name hellomvc-asg \
            --region ap-south-1 \
            --query 'Activities[0:5].{Time:StartTime, Activity:Description, Status:StatusCode}' \
            --output table || echo "No scaling activities found"

          echo "=== Final Auto Scaling State ==="
          aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names hellomvc-asg \
            --region ap-south-1 \
            --query 'AutoScalingGroups[0].{Desired:DesiredCapacity, Instances:Instances[*].InstanceId}' \
            --output table

      - name: Generate test report
        run: |
          echo "=== Load Test Report ==="
          echo "✅ Load test completed (some DNS failures are expected in GitHub Actions)"
          echo "🔍 Check CloudWatch dashboard for scaling metrics:"
          echo "https://ap-south-1.console.aws.amazon.com/cloudwatch/home?region=ap-south-1#dashboards:name=hellomvc-dev-dashboard"
          echo "💡 If scaling didn't trigger, the DNS issues may have reduced effective traffic"

name: Load Test Auto Scaling

on:
  workflow_dispatch:
    inputs:
      test_duration:
        description: 'Test duration (minutes)'
        required: true
        default: '8'
        type: choice
        options:
        - '5'
        - '8'
        - '12'
        - '15'

jobs:
  load-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        run: |
          pip install requests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Find Load Balancer by Name Pattern
        id: find-clb
        run: |
          echo "üîç Searching for Load Balancer..."
          
          # Get all Classic Load Balancers and filter by name pattern
          CLB_URL=$(aws elb describe-load-balancers \
            --region ap-south-1 \
            --query 'LoadBalancerDescriptions[?starts_with(LoadBalancerName, `hellomvc-clb`)].DNSName' \
            --output text)
          
          if [ -z "$CLB_URL" ]; then
            echo "‚ùå ERROR: No Load Balancer found starting with 'hellomvc-clb'"
            echo ""
            echo "üí° Troubleshooting:"
            echo "1. Make sure your infrastructure is deployed: terraform apply"
            echo "2. Check the exact CLB name in AWS Console"
            echo "3. Run this locally to find it: aws elb describe-load-balancers --region ap-south-1 --query 'LoadBalancerDescriptions[].LoadBalancerName'"
            exit 1
          fi
          
          echo "clb_url=$CLB_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Found Load Balancer: $CLB_URL"

      - name: Check Auto Scaling Group Status
        run: |
          echo "=== Auto Scaling Group Status ==="
          aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names hellomvc-asg \
            --region ap-south-1 \
            --query 'AutoScalingGroups[0].{Desired:DesiredCapacity, Instances:Instances[*].InstanceId}' \
            --output table

      - name: Run Load Test using generator.py
        run: |
          echo "üöÄ Starting Load Test"
          echo "üéØ Target: ${{ steps.find-clb.outputs.clb_url }}"
          echo "‚è±Ô∏è Duration: ${{ github.event.inputs.test_duration }} minutes"
          echo ""
          
          # Use your actual generator.py script
            python terraform/scripts/generator.py "${{ steps.find-clb.outputs.clb_url }}" "${{ github.event.inputs.test_duration }}"
      - name: Wait for scaling activities
        run: |
          echo "‚è≥ Waiting for scaling activities to complete..."
          sleep 120

      - name: Check scaling results
        run: |
          echo "=== Scaling Activities ==="
          aws autoscaling describe-scaling-activities \
            --auto-scaling-group-name hellomvc-asg \
            --region ap-south-1 \
            --query 'Activities[0:5].{Time:StartTime, Activity:Description, Status:StatusCode}' \
            --output table || echo "No recent scaling activities found"

      - name: Final status check
        run: |
          echo "=== Final Auto Scaling Status ==="
          aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names hellomvc-asg \
            --region ap-south-1 \
            --query 'AutoScalingGroups[0].{Desired:DesiredCapacity, Instances:Instances[*].InstanceId}' \
            --output table

      - name: Generate test report
        run: |
          echo "üéâ Load Test Complete!"
          echo ""
          echo "üìä Next steps:"
          echo "1. Check CloudWatch dashboard for metrics:"
          echo "   https://ap-south-1.console.aws.amazon.com/cloudwatch/home?region=ap-south-1#dashboards:name=hellomvc-dev-dashboard"
          echo "2. View Auto Scaling activities in AWS Console"
          echo "3. Check instance metrics and scaling events"
